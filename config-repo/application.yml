#server.port: 6666

spring:
  #  application.name: @artifactId@
  main:
    allow-bean-definition-overriding: true

#spring.datasource:
#  url: jdbc:mysql://${mysql:mysql}:3306/foodie-cloud?connectTimeout=2000&socketTimeout=150000&allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
#  driver-class-name: com.mysql.cj.jdbc.Driver
#  username: foodie
#  password: foodie

spring.shardingsphere:
  datasource:
    names:
      master,slave
    master:
      type: com.zaxxer.hikari.HikariDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbcUrl: jdbc:mysql://${mysql-master:mysql-master}:3307/foodie-cloud?connectTimeout=2000&socketTimeout=150000&allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
      username: foodie
      password: foodie
    slave:
      type: com.zaxxer.hikari.HikariDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbcUrl: jdbc:mysql://${mysql-slave:mysql-slave}:3308/foodie-cloud?connectTimeout=2000&socketTimeout=150000&allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
      username: foodie
      password: foodie
  master-slave:
    load-balance-algorithm-type: round_robin
    # 最终的数据源名称
    name: dataSource
    # 主库数据源名称
    master-data-source-name: master
    # 从库数据源名称列表，多个逗号分隔
    slave-data-source-names: slave
  props:
    sql:
      show: true
# Sharding Sphere 不支持数据库健康检查
management.health.db.enabled: false


spring.redis:
  port: 6379
  host: ${redis:redis}
  timeout: 3000
  password: 123456

eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ip-address}:${server.port}
    # 客户端向注册中心发送心跳的时间间隔，默认30秒
    leaseRenewalIntervalInSeconds: 5
    #注册中心在收到客户端心跳之后，等待下一次心跳的超时时间，如果在这个时间内没有收到下次心跳，则移除该客户端。默认90秒
    leaseExpirationDurationInSeconds: 30
  client:
    service-url:
      defaultZone: http://${eureka:eureka}:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      id-type: ASSIGN_ID

springdoc:
  version: '@springdoc.version@'
  swagger-ui:
    display-request-duration: true
    groups-order: DESC
    operations-sorter: method
    disable-swagger-default-url: true
    use-root-path: true
  show-actuator: true

feign:
  client:
    config:
      default:
        loggerLevel: HEADERS
        connectTimeout: 5000
        readTimeout: 5000
  httpclient:
    max-connections: 200 # 最大的连接数
    max-connections-per-route: 50 # 每个路径的最大连接数
    ok-http:
      read-timeout: 5s
  okhttp:
    enabled: true
    loadbalancer:
      enabled: true
  circuitbreaker:
    enabled: true

resilience4j.circuitbreaker:
  instances:
    authservice:
      allowHealthIndicatorToFail: false
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 5
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - com.chensoul.core.exception.InvalidInputException
        - com.chensoul.core.exception.NotFoundException

resilience4j.ratelimiter:
  instances:
    authservice:
      limitForPeriod: 10
      limitRefreshPeriod: 5s
      timeoutDuration: 0

resilience4j.retry:
  instances:
    authservice:
      maxAttempts: 3
      waitDuration: 1000
      retryExceptions:
        - java.io.IOException
        - java.util.concurrent.TimeoutException

security:
  oauth2:
    client:
      client-id: client
      client-secret: secret
    resource:
      token-info-uri: http://${auth-service:auth-service}:6666/oauth/check_token
      prefer-token-info: true

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

management.health.circuitbreakers.enabled: true

spring.cloud.zipkin:
  base-url: http://${zipkin:zipkin}:9411/
  sender:
    type: web
spring.cloud.sleuth:
  sampler:
    probability: 1

logging:
  level:
    root: INFO
    com.chensoul: DEBUG
#    org.springframework.cloud.openfeign: debug
#    org.springframework.cloud.sleuth: debug
